@echo off
title TF2 DLL Injector
color 0A

:: Check for admin privileges
net session >nul 2>&1
if %errorlevel% neq 0 (
    echo Administrator privileges required!
    echo Right-click and select "Run as administrator"
    pause
    exit
)

:: Variables
set "DLL_PATH=%~dp0cheat.dll"
set "INJECTED=false"

:: Check if DLL exists
if not exist "%DLL_PATH%" (
    echo Error: cheat.dll not found!
    echo Please place cheat.dll in the same folder as this batch file.
    pause
    exit
)

:: Check if TF2 is running
tasklist /FI "IMAGENAME eq hl2.exe" 2>NUL | find /I /N "hl2.exe">NUL
if "%ERRORLEVEL%"=="0" (
    echo TF2 is running. Preparing to inject...
) else (
    echo TF2 is not running! Please start TF2 first.
    echo Waiting for TF2 to start...
    
    :WAIT_LOOP
    timeout /t 2 >nul
    tasklist /FI "IMAGENAME eq hl2.exe" 2>NUL | find /I /N "hl2.exe">NUL
    if not "%ERRORLEVEL%"=="0" goto WAIT_LOOP
    
    echo TF2 has been detected!
)

:: Create injector PowerShell script
echo Creating injector...
echo $ErrorActionPreference = 'SilentlyContinue' > "%TEMP%\inject.ps1"
echo Add-Type -TypeDefinition @" >> "%TEMP%\inject.ps1"
echo using System; >> "%TEMP%\inject.ps1"
echo using System.Diagnostics; >> "%TEMP%\inject.ps1"
echo using System.Runtime.InteropServices; >> "%TEMP%\inject.ps1"
echo public class Injector { >> "%TEMP%\inject.ps1"
echo     [DllImport("kernel32.dll")] >> "%TEMP%\inject.ps1"
echo     public static extern IntPtr OpenProcess(int dwDesiredAccess, bool bInheritHandle, int dwProcessId); >> "%TEMP%\inject.ps1"
echo     [DllImport("kernel32.dll", CharSet=CharSet.Auto)] >> "%TEMP%\inject.ps1"
echo     public static extern IntPtr GetModuleHandle(string lpModuleName); >> "%TEMP%\inject.ps1"
echo     [DllImport("kernel32.dll", CharSet=CharSet.Ansi, ExactSpelling=true, SetLastError=true)] >> "%TEMP%\inject.ps1"
echo     public static extern IntPtr GetProcAddress(IntPtr hModule, string procName); >> "%TEMP%\inject.ps1"
echo     [DllImport("kernel32.dll", SetLastError=true, ExactSpelling=true)] >> "%TEMP%\inject.ps1"
echo     public static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect); >> "%TEMP%\inject.ps1"
echo     [DllImport("kernel32.dll", SetLastError=true)] >> "%TEMP%\inject.ps1"
echo     public static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, uint nSize, out UIntPtr lpNumberOfBytesWritten); >> "%TEMP%\inject.ps1"
echo     [DllImport("kernel32.dll")] >> "%TEMP%\inject.ps1"
echo     public static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId); >> "%TEMP%\inject.ps1"
echo     [DllImport("kernel32.dll", SetLastError=true)] >> "%TEMP%\inject.ps1"
echo     public static extern bool CloseHandle(IntPtr hObject); >> "%TEMP%\inject.ps1"
echo     public static bool Inject(string processName, string dllPath) { >> "%TEMP%\inject.ps1"
echo         Process targetProcess = Process.GetProcessesByName(processName)[0]; >> "%TEMP%\inject.ps1"
echo         IntPtr procHandle = OpenProcess(0x1F0FFF, false, targetProcess.Id); >> "%TEMP%\inject.ps1"
echo         IntPtr loadLibraryAddr = GetProcAddress(GetModuleHandle("kernel32.dll"), "LoadLibraryA"); >> "%TEMP%\inject.ps1"
echo         IntPtr allocMemAddress = VirtualAllocEx(procHandle, IntPtr.Zero, (uint)dllPath.Length + 1, 0x3000, 0x40); >> "%TEMP%\inject.ps1"
echo         UIntPtr bytesWritten; >> "%TEMP%\inject.ps1"
echo         WriteProcessMemory(procHandle, allocMemAddress, System.Text.Encoding.Default.GetBytes(dllPath), (uint)dllPath.Length + 1, out bytesWritten); >> "%TEMP%\inject.ps1"
echo         CreateRemoteThread(procHandle, IntPtr.Zero, 0, loadLibraryAddr, allocMemAddress, 0, IntPtr.Zero); >> "%TEMP%\inject.ps1"
echo         CloseHandle(procHandle); >> "%TEMP%\inject.ps1"
echo         return true; >> "%TEMP%\inject.ps1"
echo     } >> "%TEMP%\inject.ps1"
echo } >> "%TEMP%\inject.ps1"
echo "@ >> "%TEMP%\inject.ps1"
echo $result = [Injector]::Inject("hl2", '%DLL_PATH%') >> "%TEMP%\inject.ps1"
echo if($result) { Write-Host "Injection successful!" } else { Write-Host "Injection failed!" } >> "%TEMP%\inject.ps1"

:: Execute the injector
echo Injecting DLL into TF2...
powershell -ExecutionPolicy Bypass -File "%TEMP%\inject.ps1"
if %ERRORLEVEL% EQU 0 (
    set "INJECTED=true"
    echo.
    echo DLL has been successfully injected!
    echo Use F4 to toggle cheat features in-game
) else (
    echo.
    echo Failed to inject DLL. Make sure TF2 is running and try again.
)

:: Clean up
del "%TEMP%\inject.ps1" >nul 2>&1

echo.
echo Injection status: %INJECTED%
echo.
echo Press any key to exit...
pause >nul
exit
